

* Sch√©mas logiques

#+begin_src python :results file  :session poetry_virtual_env
import schemdraw as schemdraw
from schemdraw import logic
    
filename = "images/circuit_logique.svg"
    
d = schemdraw.Drawing(unit=.5)
d += (S := logic.Xor().label('S', 'right'))
d += (A := logic.Dot().at(S.in1))
d += logic.Line().left().length(d.unit*2).label('A', 'left')
d += logic.Line().left().at(S.in2)
d += (B := logic.Dot())
d += logic.Line().left().label('B', 'left')
    
d += logic.Line().down().at(A.start).length(d.unit*3)
d += (C := logic.And().right().anchor('in1').label('C', 'right'))
d += logic.Line().down().at(B.start).toy(C.in2)
d += logic.Line().to(C.in2)
#  d.draw()
d.save(filename)
print(filename)
filename
    
#+end_src

#+RESULTS:
[[file:]]

#+begin_src python :results file  :session poetry_virtual_env
  import schemdraw as schemdraw
  from schemdraw import logic
      
  filename = "images/and_logique.svg"
      
  d = schemdraw.Drawing(unit=.5)
  d += (S := logic.And().label('S', 'right').label('A', 'in1').label('B','in2'))
  #  d.draw()
  d.save(filename)
  print(filename)
  filename
      
#+end_src

#+RESULTS:
[[file:images/and_logique.svg]]

#+begin_src python :results file  :session poetry_virtual_env
  import schemdraw as schemdraw
  from schemdraw import logic
      
  filename = "images/exor_logique.svg"
      
  d = schemdraw.Drawing(unit=.5)
  d += (S := logic.Xor().label('S', 'right').label('A', 'in1').label('B','in2'))
  #  d.draw()
  d.save(filename)
  print(filename)
  filename
      
#+end_src

#+RESULTS:
[[file:images/exor_logique.svg]]



#+begin_src python :results file  :session poetry_virtual_env
  import schemdraw as schemdraw
  from schemdraw import logic
      
  filename = "images/xnor_logique.svg"
      
  d = schemdraw.Drawing(unit=.5)
  d += (S := logic.Xnor().label('S', 'right').label('A', 'in1').label('B','in2'))
  #  d.draw()
  d.save(filename)
  print(filename)
  filename
#+end_src

#+RESULTS:
[[file:images/xnor_logique.svg]]

#+begin_src python :results file  :session poetry_virtual_env
  import schemdraw as schemdraw
  from schemdraw import logic
      
  filename = "images/nor_logique.svg"
      
  d = schemdraw.Drawing(unit=.5)
  d += (S := logic.Nor().label('S', 'right').label('A', 'in1').label('B','in2'))
  #  d.draw()
  d.save(filename)
  print(filename)
  filename
      
#+end_src

#+RESULTS:
[[file:images/nor_logique.svg]]

#+begin_src python :results file  :session poetry_virtual_env
  import schemdraw as schemdraw
  from schemdraw import logic
      
  filename = "images/and3_logique.svg"
      
  d = schemdraw.Drawing(unit=.5)
  d += (S := logic.And(inputs=3).label('S', 'right').label('A', 'in1').label('B','in2').label('C','in3'))
  #  d.draw()
  d.save(filename)
  print(filename)
  filename
      
#+end_src

#+RESULTS:
[[file:images/and3_logique.svg]]

#+begin_src python :results file  :session poetry_virtual_env
  import schemdraw as schemdraw
  from schemdraw import logic
      
  filename = "images/nand3_logique.svg"
      
  d = schemdraw.Drawing(unit=.5)
  d += (S := logic.Nand(inputs=3).label('S', 'right').label('A', 'in1').label('B','in2').label('C','in3'))
  #  d.draw()
  d.save(filename)
  print(filename)
  filename
      
#+end_src

#+RESULTS:
[[file:images/nand3_logique.svg]]


#+begin_src python :results file  :session poetry_virtual_env
  import schemdraw as schemdraw
  from schemdraw import logic
      
  filename = "images/nand3_logique_invin1.svg"
      
  d = schemdraw.Drawing(unit=.5)
  d += (S := logic.Nand(inputs=3, inputnots=[1]).label('S', 'right').label('A', 'in1').label('B','in2').label('C','in3'))
  #  d.draw()
  d.save(filename)
  print(filename)
  filename
      
#+end_src

#+RESULTS:
[[file:images/nand3_logique_invin1.svg]]


#+begin_src python :results file  :session poetry_virtual_env
  import schemdraw as schemdraw
  from schemdraw import logic
      
  filename = "images/not_logique.svg"
      
  d = schemdraw.Drawing(unit=.5)
  d += (B := logic.Not().label('B', 'right').label('A', 'in'))
  #  d.draw()
  d.save(filename)
  print(filename)
  filename
      
#+end_src

#+RESULTS:
[[file:images/not_logique.svg]]

#+begin_src python :results file  :session poetry_virtual_env
  import schemdraw as schemdraw
  from schemdraw import logic
      
  filename = "images/and_logique.svg"
      
  d = schemdraw.Drawing(unit=.5)
  d += (S := logic.And().label('S', 'right').label('A', 'in1').label('B','in2'))
  #  d.draw()
  d.save(filename)
  print(filename)
  filename
      
#+end_src

#+RESULTS:
[[file:images/and_logique.svg]]

#+begin_src python :results file  :session poetry_virtual_env

import schemdraw as schemdraw
from schemdraw import logic
from schemdraw.parsing import logicparse
    
filename2 = "images/circuit_logique_inconnu.svg"
d2 = logicparse('((not (A and B and C) and ( (A and or D)) or (A or B) )) and (not (A or B or C))', outlabel='$F_1$')
# or (A and C) or (B and C)
#)

d2.save(filename2)
print(filename2)
filename2

#+end_src

#+begin_src python :results file  :session poetry_virtual_env

import schemdraw as schemdraw
from schemdraw import logic
from schemdraw.parsing import logicparse
    
filename2 = "images/circuit_logique_inconnu.svg"
d2 = logicparse('((not A) and B and C) and (not (A  or D) )', outlabel='$F_1$')


d2.save(filename2)
print(filename2)
filename2

#+end_src


#+RESULTS:
[[file:images/circuit_logique_inconnu.svg]]


#+begin_src python :results file  :session poetry_virtual_env

import schemdraw as schemdraw
from schemdraw import logic
from schemdraw.parsing import logicparse
    
filename2 = "images/circuit_logique2.svg"
d2 = logicparse('not ((w and x) or (y and z))', outlabel='$\overline{Q}$')
d2.save(filename2)
print(filename2)
filename2

#+end_src

#+RESULTS:
[[file:images/circuit_logique2.svg]]


#+begin_src python :results file  :session poetry_virtual_env
import schemdraw as schemdraw
from schemdraw import logic
from schemdraw.parsing import logicparse 
filename12 = "images/somme_produits.svg"
d2 = logicparse('((A and B) or (C and D))', outlabel='F')
d2.save(filename12)
print(filename12)
filename12
#+end_src

#+RESULTS:
[[file:images/produit_somme.svg]]

#+begin_src python :results file  :session poetry_virtual_env
      

import schemdraw
from schemdraw import logic
      
filename3 = "images/kmap4fonct.svg"

d3 = schemdraw.Drawing()
d3 += logic.Kmap(names='ABCD',
           truthtable=[('1100', '1'),
                       ('1101', '1'),
                       ('1111', '1'),
                       ('1110', '1'),
                       ('0101', '1'),
                       ('0111', 'X'),
                       ('0010', 'X'),
                       ('1101', '1'),
                       ('1111', '1'),
                       ('1000', '1')],
           groups={'11..': {'color': 'red', 'fill': '#ff000033'},
                   '.1.1': {'color': 'blue', 'fill': '#0000ff33'},
                   '1.00': {'color': 'green', 'fill': '#00ff0033'}})
d3.save(filename3)
print(filename3)
filename3
      
#+end_src

#+RESULTS:
[[file:images/kmap4fonct.svg]]

#+begin_src python :results file  :session poetry_virtual_env
    import schemdraw as schemdraw
    from schemdraw import logic
    filename13 = "images/NORequiv.svg"
    
    d15 = schemdraw.Drawing(unit=.5)
    d15 += (N1 := logic.Nor().label('x', 'in1').label('y','in2').label('$(x + y)^{\prime}$', 'right'))
    d15.move_from(N1.in2, dy=-d12.unit*3)
    d15 += (O1 := logic.And(inputnots = [1,2]).label('x', 'in1').label('y','in2').label('$x^{\prime} y^{\prime}$', 'right'))
    d15.save(filename13)
    print(filename13)
    filename13
#+end_src

#+RESULTS:
[[file:images/NORequiv.svg]]

#+begin_src python :results file  :session poetry_virtual_env
    import schemdraw as schemdraw
    from schemdraw import logic
    filename13 = "images/NANDequiv.svg"
    
    d15 = schemdraw.Drawing(unit=.5)
    d15 += (N1 := logic.Nand().label('x', 'in1').label('y','in2').label('$(xy)^{\prime}$', 'right'))
    d15.move_from(N1.in2, dy=-d12.unit*3)
    d15 += (O1 := logic.Or(inputnots = [1,2]).label('x', 'in1').label('y','in2').label('$ x^{\prime} + y^{\prime}$', 'right'))
    d15.save(filename13)
    print(filename13)
    filename13
#+end_src

#+RESULTS:
[[file:images/NANDequiv.svg]]

#+begin_src python :results file  :session poetry_virtual_env
    import schemdraw as schemdraw
    from schemdraw import logic
    filename13 = "images/somme_produitsNAND.svg"
    
    d12 = schemdraw.Drawing(unit=.5)
    d12 += (N1 := logic.Nand().label('A', 'in1').label('B','in2'))
    d12.move_from(N1.in2, dy=-d12.unit*2)
    d12 += (N2 := logic.Nand().label('C', 'in1').label('D','in2'))
    d12.move_from(N1.out, dy=-(N1.out.y-N2.out.y)/2)
    d12 += (O1 := logic.Or(inputnots = [1,2]).right().label('F', 'right'))
    d12 += logic.Line().at(N1.out).toy(O1.in1)
    d12 += logic.Line().at(N2.out).toy(O1.in2)
    d12.save(filename13)
    print(filename13)
    filename13
#+end_src

#+RESULTS:
[[file:images/produit_sommeNAND.svg]]


#+begin_src python :results file  :session poetry_virtual_env
import schemdraw as schemdraw
from schemdraw import logic
from schemdraw.parsing import logicparse 
filename12 = "images/somme_produitsNAND2.svg"
d2 = logicparse('( (A nand B) nand (C nand D))', outlabel='F')
d2.save(filename12)
print(filename12)
filename12
#+end_src

#+RESULTS:
[[file:images/produit_sommeNAND2.svg]]

* Diagrammes de Karnaugh

#+begin_src python :results file  :session poetry_virtual_env      

import schemdraw
from schemdraw import logic
      
filename3 = "images/kmap4z1.svg"

d3 = schemdraw.Drawing()
d3 += logic.Kmap(names='abcd',
           truthtable=[('0001', '1'),
                       ('0100', '1'),
                       ('0101', '1'),
                       ('1111', '1'),
                       ('1110', '1'),
                       ('1011', '1'),
                       ('1010', '1')])
d3.save(filename3)
print(filename3)
filename3
      
#+end_src

#+RESULTS:
[[file:images/kmap4z1.svg]]

#+begin_src python :results file  :session poetry_virtual_env
      

import schemdraw
from schemdraw import logic
      
filename3 = "images/kmap4z2.svg"

d3 = schemdraw.Drawing()
d3 += logic.Kmap(names='abcd',
          truthtable=[('0001', '1'),
                       ('0100', '1'),
                       ('1111', '1'),
                       ('1110', '1'),
                       ('1011', '1'),
                       ('1010', '1')])
d3.save(filename3)
print(filename3)
filename3
      
#+end_src

#+RESULTS:
[[file:images/kmap4z2.svg]]


#+begin_src python :results file  :session poetry_virtual_env
  
  import schemdraw
  from schemdraw import logic
	
  filename4 = "images/kmap2.svg"
  
  d4 = schemdraw.Drawing()
  d4 += logic.Kmap(names='AB',          
		   truthtable=[('00', 'm0'),
			 ('01', 'm1'),
			 ('10', 'm2'),
			 ('11', 'm3'),
			])
  d4.save(filename4)
  print(filename4)
  filename4
	
#+end_src

#+RESULTS:
[[file:images/kmap2.svg]]


#+begin_src python :results file  :session poetry_virtual_env  

import schemdraw
from schemdraw import logic
      
filename5 = "images/kmap3.svg"

d5 = schemdraw.Drawing()
d5 += logic.Kmap(names='ABC')
d5.save(filename5)
print(filename5)
filename5
      
#+end_src

#+RESULTS:
[[file:images/kmap3.svg]]

#+begin_src python :results file  :session poetry_virtual_env  

import schemdraw
from schemdraw import logic
      
filename5 = "images/kmap3minterms.svg"

d10 = schemdraw.Drawing()
d10 += logic.Kmap(names='ABC',
           truthtable=[('000', 'm0'),
                       ('001', 'm1'),
                       ('010', 'm2'),
                       ('011', 'm3'),
                       ('100', 'm4'),
                       ('101', 'm5'),
                       ('110', 'm6'),
                       ('111', 'm7')])
d10.save(filename5)
print(filename5)
filename5
      
#+end_src

#+RESULTS:
[[file:images/kmap3minterms.svg]]

#+begin_src python :results file  :session poetry_virtual_env  

import schemdraw
from schemdraw import logic
      
filename5 = "images/kmap3altern.svg"

d21 = schemdraw.Drawing()
d21 += logic.Kmap(names='abc',
           truthtable=[('010', '1'),
                       ('011', '1'),
                       ('111', '1'),
                       ('100', '1')])
d21.save(filename5)
print(filename5)
filename5
      
#+end_src

#+RESULTS:
[[file:images/kmap3altern.svg]]

#+begin_src python :results file  :session poetry_virtual_env  

import schemdraw
from schemdraw import logic
      
filename5 = "images/kmap3fonct.svg"

d9 = schemdraw.Drawing()
d9 += logic.Kmap(names='ABC',
           truthtable=[('100', '1'),
                       ('111', '1'),
                       ('110', '1'),
                       ('000', '1')])
d9.save(filename5)
print(filename5)
filename5
      
#+end_src

#+begin_src python :results file  :session poetry_virtual_env  

import schemdraw
from schemdraw import logic
      
filename5 = "images/kmap3fonct.svg"

d9 = schemdraw.Drawing()
d9 += logic.Kmap(names='ABC',
           truthtable=[('100', '1'),
                       ('111', '1'),
                       ('110', '1'),
                       ('000', '1')])
d9.save(filename5)
print(filename5)
filename5
      
#+end_src

#+RESULTS:
[[file:images/kmap3fonct.svg]]

#+begin_src python :results file  :session poetry_virtual_env  

import schemdraw
from schemdraw import logic
      
filename10 = "images/kmap3fonctsimp.svg"

d11 = schemdraw.Drawing()
d11 += logic.Kmap(names='ABC',
           truthtable=[('100', '1'),
                       ('111', '1'),
                       ('110', '1'),
                       ('000', '1')],
           groups={'.00': {'color': 'red', 'fill': '#ff000033'},
                   '11.': {'color': 'blue', 'fill': '#0000ff33'},
                   '1.0': {'color': 'green', 'fill': '#00ff0033'}})
d11.save(filename10)
print(filename10)
filename10
      
#+end_src

#+RESULTS:
[[file:images/kmap3fonctsimp.svg]]


#+begin_src python :results file  :session poetry_virtual_env  
import schemdraw
from schemdraw import logic     
filename6 = "images/kmap4.svg"
d6 = schemdraw.Drawing()
d6 += logic.Kmap(names='ABCD')
d6.save(filename6)
print(filename6)
filename6   
#+end_src

#+RESULTS:
[[file:images/kmap4.svg]]

* Tableaux de v√©rit√©

#+begin_src python :results file  :session poetry_virtual_env
import schemdraw as schem
from schemdraw import logic

filename4 = "images/table_verite.svg"
d4 = schemdraw.Drawing()
table = '''
 A | B | C
---|---|---
 0 | 0 | 0
 0 | 1 | 0
 1 | 0 | 0
 1 | 1 | 1
'''
d4 += logic.Table(table, colfmt='cc||c')
d4.save(filename4)

print(filename4)
filename4
#+end_src

#+RESULTS:
[[file:images/table_verite.svg]]

* Chronogrammes





#+begin_src python :results file  :session poetry_virtual_env
import schemdraw as schem
from schemdraw import logic

filename5 = "images/chrononodelaientree.svg"
d5 = schem.Drawing()
d5 += logic.TimingDiagram(
{'signal': [
        {'name': '$A$','wave': '01', 'async': [0, 0.4, 1.5]},
        {'name': '$B$', 'wave': '10', 'async': [0, 0.9, 1.5]},
        {'name': 'S',  'wave': '010', 'async': [0, 0.6, 1.15, 1.5]},
    ],
     'edge': ['[2v:0.4]+[2v:0.6] $t_{pA}$',
              '[0^:0.4]-[2v:0.4]{lightgray,:}',
              '[1^:0.9]-[2v:0.9]{lightgray,:}',
              '[2v:0.9]+[2v:1.15] $t_{pB}$',
             ], 'config': {'hscale': 6}}, risetime=.1, ygap=.95, grid=False) 
d5.save(filename5)

print(filename5)
filename5
#+end_src

#+RESULTS:
[[file:images/chrononodelaientree.svg]]



#+begin_src python :results file  :session poetry_virtual_env
import schemdraw as schem
from schemdraw import logic

filename5 = "images/chrononodelaisortie.svg"
d5 = schem.Drawing()
d5 += logic.TimingDiagram(
{'signal': [
        {'name': '$A$','wave': '01', 'async': [0, .7, 1.5]},
        {'name': '$B$', 'wave': '1', 'async': [0,  1.5]},
        {'name': 'S',  'wave': '01', 'async': [0, 0.9, 1.5]},
    ],
     'edge': ['[2v:0.7]+[2v:0.9] $t_{p}$',
              '[0^:0.7]-[2v:0.7]{lightgray,:}',
             ], 'config': {'hscale': 6}}, risetime=.1, ygap=.95, grid=False) 
d5.save(filename5)

print(filename5)
filename5
#+end_src

#+RESULTS:
[[file:images/chrononodelaisortie.svg]]



#+begin_src python :results file  :session poetry_virtual_env
import schemdraw as schem
from schemdraw import logic

filename5 = "images/chronopasdelais.svg"
d5 = schem.Drawing()
d5 += logic.TimingDiagram(
{'signal': [
        {'name': '$A$','wave': '01', 'async': [0, .7, 1.5]},
        {'name': '$B$', 'wave': '1', 'async': [0, 1.5]},
        {'name': 'S',  'wave': '01', 'async': [0, 0.7, 1.5]},
    ],
     'edge': ['[0^:0.7]-[2v:0.7]{lightgray,:}',
             ], 'config': {'hscale': 6}}, risetime=.1, ygap=.95, grid=False) 
d5.save(filename5)

print(filename5)
filename5
#+end_src

#+RESULTS:
[[file:images/chronopasdelais.svg]]




#+begin_src python :results file  :session poetry_virtual_env
import schemdraw as schem
from schemdraw import logic

filename5 = "images/chronocourse.svg"
d5 = schem.Drawing()
d5 += logic.TimingDiagram(
{'signal': [
        {'name': '$a$','wave': '01', 'async': [0, .7, 1.5]},
        {'name': '$a^\prime$', 'wave': '10', 'async': [0, .9, 1.5]},
        {'name': 's',  'wave': '010', 'async': [0, 0.9, 1.1, 1.5]},
    ],
     'edge': ['[1v:0.7]+[1v:0.9] $t_{p1}$',
              '[2v:0.7]+[2v:1.1] $t_{p1}+t_{p2}$',
              '[0^:0.7]-[2v:0.7]{lightgray,:}',
             ], 'config': {'hscale': 6}}, risetime=.1, ygap=.95, grid=False) 
d5.save(filename5)

print(filename5)
filename5
#+end_src

#+RESULTS:
[[file:images/chronocourse.svg]]



#+begin_src python :results file  :session poetry_virtual_env
import schemdraw as schem
from schemdraw import logic

filename5 = "images/D_setup.svg"
d5 = schem.Drawing()
d5 += logic.TimingDiagram(
{'signal': [
        {'name': 'Clk','wave': 'P..'},
        {'name': 'D', 'wave': '===', 'async': [0, .7, 1.3, 3.0]},
        {'name': 'Q',  'wave': '===', 'async': [0, 1.2, 2.3, 3.0]},
    ],
     'edge': ['[1v:1]+[1v:1.3] $t_{hold}$',
              '[1v:0.7]+[1v:1.0] $t_{setup}$',
              '[2v:1.0]+[2v:1.2] $t_{prop}$',
              '[0^:1]-[2v:1]{lightgray,:}',
              '[0^:2]-[2v:2]{lightgray,:}',
             ], 'config': {'hscale': 6}}, risetime=.1, ygap=.95, grid=False) 
d5.save(filename5)

print(filename5)
filename5
#+end_src

#+RESULTS:
[[file:images/D_setup.svg]]


#+begin_src python :results file  :session poetry_virtual_env
import schemdraw as schem
from schemdraw import logic

filename5 = "images/ram_lecture2.svg"
d5 = schem.Drawing()
d5 += logic.TimingDiagram(
    {'signal': [
        {'name': 'Addresse',     'wave': 'x4......x.', 'data': ['Adresse valide']},
        {'name': 'Chip Select', 'wave': '1.0.....1.'},
        {'name': 'Enable',  'wave': '1.0.....1.'},
        {'name': 'Donn√©es',    'wave': 'z...x6...z', 'data': ['Donn√©es valides']},
    ],
     'edge': ['[0^:1.2]+[0^:8] $t_{WC}$',
              '[0v:1]+[0v:5] $t_{AQ}$',
              '[1:2]+[1:5] $t_{EQ}$',
              '[2:2]+[2:5] $t_{GQ}$',
              '[0^:5]-[3v:5]{lightgray,:}',
             ]
    }, ygap=.5, grid=False) 
d5.save(filename5)

print(filename5)
filename5
#+end_src

#+RESULTS:
[[file:images/ram_lecture2.svg]]

#+begin_src python :results file  :session poetry_virtual_env
import schemdraw as schem
from schemdraw import logic

filename5 = "images/chron_JK.svg"
d5 = schem.Drawing()
d5 += logic.TimingDiagram(
    {'signal': [
        {'name': 'clk', 'wave': 'P......'},
        {'name': 'J', 'wave': '0101', 'async': [0, .8, 1.3, 3.7, 7]},
        {'name': 'K', 'wave': '010101', 'async': [0, 1.2, 2.3, 2.8, 3.2, 3.7, 7]},
        {'name': 'Q', 'wave': '010.101', 'color': 'red', 'lw': 1.5},
        {'name': '$\overline{Q}$', 'wave': '101.010', 'color': 'blue', 'lw': 1.5}],
    'config': {'hscale': 1.5}}, risetime=.05)
d5.save(filename5)

print(filename5)
filename5
#+end_src

#+RESULTS:
[[file:images/chron_JK.svg]]

d5.save(filename5)

print(filename5)
filename5
#+end_src


#+begin_src python :results file  :session poetry_virtual_env
import schemdraw as schem
from schemdraw import logic

filename6 = "images/timing2.svg"
d6 = schem.Drawing()
d6 += logic.TimingDiagram(
    {'signal': [
        {'name': 'clk', 'wave': 'P......'},
        {'name': 'J', 'wave': '0101', 'async': [0, .8, 1.3, 3.7, 7]},
        {'name': 'K', 'wave': '010101', 'async': [0, 1.2, 2.3, 2.8, 3.2, 3.7, 7]},
        {'name': 'Q', 'wave': '010.101', 'color': 'red', 'lw': 1.5},
        {'name': '$\overline{Q}$', 'wave': '101.010', 'color': 'blue', 'lw': 1.5}],
    'config': {'hscale': 1.5}}, risetime=.05)
d6.save(filename6)

print(filename6)
filename6
#+end_src

#+RESULTS:
[[file:images/timing2.svg]]


#+begin_src python :results file  :session poetry_virtual_env
import schemdraw as schem
from schemdraw import logic

filename5 = "images/chron_D.svg"
d5 = schem.Drawing()
d5 += logic.TimingDiagram(
    {'signal': [
        {'name': 'clk', 'wave': 'P..'},
        {'name': 'D', 'wave': '010', 'async': [0, .8, 1.7, 3.7]},
        {'name': 'Q', 'wave': '010', 'color': 'red', 'lw': 2.0},
       ],
    'config': {'hscale': 2.0}}, risetime=.05)
d5.save(filename5)

print(filename5)
filename5
#+end_src

#+RESULTS:
[[file:images/chron_D.svg]]

#+begin_src python :results file  :session poetry_virtual_env
import schemdraw as schem
from schemdraw import logic

filename6 = "images/horloge.svg"
d6 = schem.Drawing()
d6 += logic.TimingDiagram(
    {'signal': [
        {'name': 'horloge', 'wave': 'p......'},
      ],
    'config': {'hscale': 1.5}}, risetime=.05)
d6.save(filename6)

print(filename6)
filename6
#+end_src

#+RESULTS:
[[file:images/horloge.svg]]



#+begin_src python :results file  :session poetry_virtual_env
import schemdraw as schem
from schemdraw import logic

filename6 = "images/horlogeP.svg"
d6 = schem.Drawing()
d6 += logic.TimingDiagram(
    {'signal': [
        {'name': 'Front montant', 'wave': 'P......'},
        {'name': 'Front descendant', 'wave': 'N......'},
      ],
    'config': {'hscale': 1.5}}, risetime=.05)
d6.save(filename6)

print(filename6)
filename6
#+end_src

#+RESULTS:
[[file:images/horlogeP.svg]]

* Ditaa

#+begin_src ditaa :file ditaa-seqboxes.png
+------+   +-----+   +-----+   +-----+
|{io}  |   |{d}  |   |{s}  |   |cBLU |
| Foo  +---+ Bar +---+ Baz +---+ Moo |
|      |   |     |   |     |   |     |
+------+   +-----+   +--+--+   +-----+
                        |
           /-----\      |      +------+
           |     |      |      | c1AB |
           | Goo +------+---=--+ Shoo |
           \-----/             |      |
                               +------+
#+end_src

#+RESULTS:
[[file:ditaa-seqboxes.png]]


#+begin_src ditaa :file images/circuit_comb.png
	    +----------------+ 
	    |                | 
	--->+                +--> 
	    |   Circuit      | 
	--->+                +-->
	    |                | 
n entr√©es   | Combinatoire   |  m sorties
	    |                | 
	--->+                +-->
	    |                | 
	    +----------------+ 
	
#+end_src

#+RESULTS:
[[file:images/circuit_comb.png]]

#+begin_src python :results file  :session poetry_virtual_env      

import schemdraw
from schemdraw import logic
      
filename3 = "images/demi_add.svg"

d23 = schemdraw.Drawing()
d23.config(unit=0.5)
d23 += (S := logic.Xor().label('$S_i$', 'right'))
d23 += logic.Line().left(d23.unit*2).at(S.in1).idot().label('$a_i$', 'left')
d23 += (B := logic.Line().left().at(S.in2).dot())
d23 += logic.Line().left().label('$b_i$', 'left')
d23 += logic.Line().down(d23.unit*3).at(S.in1)
d23 += (C := logic.And().right().anchor('in1').label('$R_i$', 'right'))
d23 += logic.Wire('|-').at(B.end).to(C.in2)

d23.save(filename3)
print(filename3)
filename3
      
#+end_src

#+RESULTS:
[[file:images/demi_add.svg]]



#+begin_src python :results file  :session poetry_virtual_env
import schemdraw as schemdraw
from schemdraw import logic
from schemdraw.parsing import logicparse 
filename12 = "images/fulladderS1.svg"
d2 = logicparse('(¬¨ a_i & ¬¨ b_i &   c_i  + ¬¨ a_i &   b_i & ¬¨ c_i  +   a_i & ¬¨ b_i & ¬¨ c_i  + ¬¨ a_i &   b_i &   c_i )'

, outlabel='$S_i$')
d2.save(filename12)
print(filename12)
filename12
#+end_src

#+RESULTS:
[[file:images/fulladderS1.svg]]


#+begin_src python :results file  :session poetry_virtual_env
import schemdraw as schemdraw
from schemdraw import logic
from schemdraw.parsing import logicparse 
filename12 = "images/fulladderR1.svg"
d2 = logicparse('(a_i & b_i   +  a_i &  c_i  +   b_i &  c_i  )'

, outlabel='$S_i$')
d2.save(filename12)
print(filename12)
filename12
#+end_src

#+RESULTS:
[[file:images/fulladderR1.svg]]



#+begin_src python :results file  :session poetry_virtual_env  

import schemdraw
from schemdraw import logic
      
filename10 = "images/kmapSi_fulladder.svg"

d11 = schemdraw.Drawing()
d11 += logic.Kmap(names='abr',
           truthtable=[('100', '1'),
                       ('010', '1'),
                       ('001', '1'),
                       ('111', '1')],
           )
d11.save(filename10)
print(filename10)
filename10
      
#+end_src

#+RESULTS:
[[file:images/kmapSi_fulladder.svg]]



#+begin_src python :results file  :session poetry_virtual_env  

import schemdraw
from schemdraw import logic
      
filename10 = "images/kmap3fulladderR.svg"

d11 = schemdraw.Drawing()
d11 += logic.Kmap(names='abr',
           truthtable=[('110', '1'),
                       ('011', '1'),
                       ('111', '1'),
                       ('101', '1')],
           groups={'11.': {'color': 'red', 'fill': '#ff000033'},
                   '1.1': {'color': 'blue', 'fill': '#0000ff33'},
                   '.11': {'color': 'green', 'fill': '#00ff0033'}})
d11.save(filename10)
print(filename10)
filename10
      
#+end_src

#+RESULTS:
[[file:images/kmap3fulladderR.svg]]




#+begin_src python :results file  :session poetry_virtual_env
import schemdraw as schemdraw
from schemdraw import logic
from schemdraw.parsing import logicparse 
filename12 = "images/mux2.svg"
d2 = logicparse('(¬¨ S & I_0  + S & I_1 )', outlabel='$Y$')
d2.save(filename12)
print(filename12)
filename12
#+end_src

#+RESULTS:
[[file:images/mux2.svg]]



#+begin_src python :results file  :session poetry_virtual_env   

import schemdraw
from schemdraw import logic
      
filename3 = "images/kmap4foncencode_pri_x.svg"

d3 = schemdraw.Drawing()
d3 += logic.Kmap(names='2301',
           truthtable=[('0000', 'X'),
                       ('0001', '1'),
                       ('0010', '1'),
                       ('0011', '1'),
                       ('0100', '0'),
                       ('0101', '1'),
                       ('0110', 'X'),
                       ('0111', '1'),
                       ('1000', '0'),
                       ('1001', '1'),
                       ('1010', 'X'),
                       ('1011', '1'),
                       ('1100', '0'),
                       ('1101', '1'),
                       ('1110', '1'),
                       ('1111', '1')],
           groups={'.1..': {'color': 'red', 'fill': '#ff000033'},
                   '1...': {'color': 'blue', 'fill': '#0000ff33'}
                  })
d3.save(filename3)
print(filename3)
filename3 
#+end_src

#+RESULTS:
[[file:images/kmap4foncencode_pri_x.svg]]



#+begin_src python :results file  :session poetry_virtual_env   

import schemdraw
from schemdraw import logic
      
filename3 = "images/kmap4foncencode_pri_y.svg"

d3 = schemdraw.Drawing()
d3 += logic.Kmap(names='2301',
           truthtable=[('0000', 'X'),
                       ('0001', '1'),
                       ('0010', '0'),
                       ('0011', '1'),
                       ('0100', '1'),
                       ('0101', '1'),
                       ('0110', '0'),
                       ('0111', '1'),
                       ('1000', '0'),
                       ('1001', '1'),
                       ('1010', '0'),
                       ('1011', '1'),
                       ('1100', '1'),
                       ('1101', '1'),
                       ('1110', '0'),
                       ('1111', '1')],
           groups={'0..1': {'color': 'red', 'fill': '#ff000033'},
                   '.1..': {'color': 'blue', 'fill': '#0000ff33'},
                   })
d3.save(filename3)
print(filename3)
filename3 
#+end_src

#+RESULTS:
[[file:images/kmap4foncencode_pri_y.svg]]
